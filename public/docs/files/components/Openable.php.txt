<?php

namespace components;

require_once 'BaseComponent.php';

/**
 * The Openable
 * @author David Ball
 * @ignore
 **/
class Openable extends BaseComponent
{
  protected $opened = false;

  public function __construct() {
    $this->define(function ($openable) {
      $openable->onBeforeOpen(function ($openable) {
        return !$openable->getParent()
            || !$openable->getParent()->hasComponent('Lockable')
            || $openable->getParent()->getComponent('Lockable')->isUnlocked();
      });
      $openable->onBeforeClose(function ($openable) {
        //No reason not to
        return true;
      });
      $openable->onOpen(function ($openable) {
        return "The object was opened.";
      });
      $openable->onRefuseOpen(function ($openable) {
        return "The object was not opened.  Perhaps it is locked.";
      });
      $openable->onClose(function ($openable) {
        return "You closed the object.";
      });
      $openable->onRefuseClose(function ($openable) {
        return "You tried to close the object, but it didn't close.";
      });
    });
  }

  /* Property Getter/Setter */

  public function setOpened() {
    $this->opened = true;
  }

  public function setClosed() {
    $this->opened = false;
  }

  /* Public API for Component */

  public function open() {
    if ($this->trigger('beforeOpen', array($this))) {
      $this->setOpened();
      return $this->trigger('open', array($this));
    }
    else
      return $this->trigger('refuseOpen', array($this));
  }

  public function close() {
    if ($this->trigger('beforeClose', array($this))) {
      $this->setClosed();
      return $this->trigger('close', array($this));
    }
    else
      return $this->trigger('refuseClose', array($this));
  }

  public function isOpened() {
    return $this->opened;
  }

  public function isClosed() {
    return !$this->isOpened();
  }

  /* Event Closure Registration Functions */

  public function onBeforeOpen($closure=null) {
    return $this->on("beforeOpen", $closure);
  }

  public function onOpen($closure=null) {
    return $this->on("open", $closure);
  }

  public function onRefuseOpen($closure=null) {
    return $this->on("refuseOpen", $closure);
  }

  public function onBeforeClose($closure=null) {
    return $this->on("beforeClose", $closure);
  }

  public function onClose($closure=null) {
    return $this->on("close", $closure);
  }

  public function onRefuseClose($closure=null) {
    return $this->on("refuseClose", $closure);
  }
}

