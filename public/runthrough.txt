reset
n
n
w
w
s
leftHand=rustyKey;
n
e
e
s
e
e
door.unlock(leftHand);
e
n
leftHand=lambChop;
n
rightHand=brassKey;
s
e
e
equip(tablet);
w
w
w
n
e
footLocker.unlock(rightHand);
rightHand=lamp;
w
s
w
s
w
n
bowl=leftHand;
n
rightHand.wind();
tablet.solveChessPuzzle();
d
equip(backpack);
e
s
tablet.raisePortcullis();
s
leftHand=sheild;
n
n
e
s
tablet.enterCombination();






//Solutions in tablet:

public void solveChessPuzzle() {
  for (int i = 1; i <= 8; i++)
    chessBoard.stepOnRank(i);
}

public void raisePortcullis() {
  crank.setHandle(handle);
  while (!portcullis.isRaised()) {
    crank.turn();
  }
}

public void openSafe() {
    c1 = c1 + 143;
    c2 = c1 * 3 - 77;
    c3 = c1 * c2;
    c2 = c2 / 2 - c1;
    c3 += c1 + c2;
    safe.open(c1, c2, c3);
}

public void fightDragon() {
  while (dragon.isAlive()) {
    if (me.getHealthPoints() <= 30) {
    me.heal(salve);
    }
    else if (dragon.isInhaling()) {
    me.block(shield);
    }
    else if (dragon.isFlying()) {
    me.attack(dragon, crossbow);
    }
    else {
    me.attack(dragon, sword);
    }
  }
}
